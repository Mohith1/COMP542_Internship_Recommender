# -*- coding: utf-8 -*-
"""PDFParsing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EyPQOHnqGEXPNt8XJix_pV6-KvPLwGrP
"""

from google.colab import files
files.upload()

# Install required libraries (only needs to be run once)
!pip install pymupdf keybert sentence-transformers

import fitz  # PyMuPDF
from keybert import KeyBERT
import re

import fitz  # PyMuPDF
import re

# Predefined skill set from Software Engineering, Data Science, and Marketing
SKILL_KEYWORDS = [
    # Software Engineering
    'python', 'java', 'c++', 'c#', 'javascript', 'typescript', 'html', 'css', 'react', 'angular', 'node.js',
    'spring boot', 'django', 'flask', 'ruby on rails', 'git', 'github', 'gitlab', 'docker', 'kubernetes',
    'jenkins', 'aws', 'azure', 'gcp', 'linux', 'bash', 'sql', 'mysql', 'postgresql', 'mongodb',
    'rest api', 'graphql', 'agile', 'scrum', 'jira', 'ci/cd', 'unit testing', 'integration testing',

    # Data Science
    'machine learning', 'deep learning', 'data science', 'nlp', 'natural language processing',
    'computer vision', 'tensorflow', 'pytorch', 'scikit-learn', 'matplotlib', 'seaborn',
    'data visualization', 'pandas', 'numpy', 'excel', 'tableau', 'power bi', 'hadoop', 'spark',

    # Marketing
    'seo', 'sem', 'google analytics', 'facebook ads', 'instagram ads', 'email marketing',
    'content marketing', 'social media', 'market research', 'brand strategy', 'ppc',
    'adwords', 'hubspot', 'salesforce', 'copywriting', 'a/b testing', 'crm', 'customer segmentation'
]

# Load the PDF and extract text
def extract_text_from_pdf(filename):
    text = []
    with fitz.open(filename) as doc:
        for page in doc:
            text.append(page.get_text())
    return " ".join(text)

# Clean the extracted text
def clean_text(text):
    # Remove non-alphabetic characters except periods (to retain technologies like node.js)
    text = re.sub(r'[^a-zA-Z0-9\.\+\#\s]', '', text)
    text = re.sub(r'\s+', ' ', text)
    return text.strip().lower()

# Match skills from the skill set
def match_skills(text):
    found_skills = set()
    for skill in SKILL_KEYWORDS:
        if skill.lower() in text:
            found_skills.add(skill)
    return sorted(found_skills)

# Main pipeline
def main():
    filename = 'Rafah Ali Resume.pdf'  # Replace with your resume file name

    # Step 1: Extract and clean text
    raw_text = extract_text_from_pdf(filename)
    cleaned_text = clean_text(raw_text)

    # Step 2: Match skills from predefined list
    matched_skills = match_skills(cleaned_text)

    # Display the results
    print("\nMatched Resume Skills:\n")
    for skill in matched_skills:
        print(f"- {skill}")

if __name__ == "__main__":
    main()